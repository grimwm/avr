#!/usr/bin/env python
# -*- mode: python -*-

import sys
import argparse
import os
from subprocess import check_call

def setup_target_default_parser(parsers):
    parser = parsers.add_parser("default")
    parser.set_defaults(target_platform="default")

def setup_target_avr_parser(parsers):
    parser = parsers.add_parser("avr")
    parser.set_defaults(target_platform="avr")
    parser.add_argument("-f_cpu", type=int, help="CPU frequency setting (Hz)")

def build_cmake_command(args, this_path):
    cmake_cmd = ["cmake"]
    if args.cmake_debug:
        cmake_cmd.append("--debug-output")
    
    if "avr" == args.target_platform:
        cmake_cmd.append(
            "-DCMAKE_TOOLCHAIN_FILE=%s" %\
            os.path.join(this_path, "cmake", "avr_toolchain.cmake"))
        cmake_cmd.append("-DF_CPU=%d", args.f_cpu)

    cmake_cmd.extend(["-G", "Unix Makefiles"])
    cmake_cmd.append(src_path)
    return cmake_cmd

this_path = os.path.dirname(sys.argv[0])
src_path = os.path.join(os.getcwd(), this_path, '..')
build_path = os.path.join(src_path, 'build')

parser = argparse.ArgumentParser()
parser.add_argument("--verbose", "-v", action="store_true")
parser.add_argument("--cmake-debug", action="store_true")

target_parsers = parser.add_subparsers(help="Target platform")
setup_target_avr_parser(target_parsers)
setup_target_default_parser(target_parsers)

args = parser.parse_args()
if args.verbose:
    print args

if not os.path.exists(build_path):
    os.mkdir(build_path)

cmake_cmd = build_cmake_command(args, this_path)
if args.verbose:
    print " ".join(cmake_cmd)

os.chdir(build_path)
check_call(cmake_cmd)
