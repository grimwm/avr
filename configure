#!/usr/bin/env python
# -*- mode: python -*-

import argparse
import os
import sys
from subprocess import check_call

import chipdefs

def get_parser(parsers, this_path, target_platform):
    """
    Build a parser with some common arguments that should be used with any
    of the parsers.  This makes the use from the command-line more natural.
    """
    parser = parsers.add_parser(target_platform)
    parser.set_defaults(target_platform=target_platform)

    default_build_path = os.path.join(this_path, "build", target_platform)
    
    parser.add_argument("--verbose", "-v", action="store_true")
    parser.add_argument('--build-dir', '-b', default=default_build_path,
                        help='Where the build will be created. (default: build)')
    parser.add_argument('--debug', '-d', action='store_true',
                        help='Generate build with debug symbols.')
    return parser

def setup_target_pc_parser(parser):
    return

def setup_target_avr_parser(parser):
    parser.add_argument("-fcpu", required=True, type=int,
                        help="CPU frequency setting (Hz)")
    parser.add_argument("-mcu", required=True,
                        help="AVR MCU model (ex. -mcu=atmega88)")
    parser.add_argument("-baud", type=int, default=9600,
                        help="BAUD rate for any code using the UART " +\
                        "(default: 9600)")
    parser.add_argument("-bs", metavar='BOOTSIZEB', type=int, default=1024,
                        help="Size of the bootloader section, in bytes " +\
                        "(default: 1024)")

def build_cmake_command(args, this_path):
    cmake_cmd = ["cmake"]
    if args.verbose:
        cmake_cmd.append("--debug-output")
    if args.debug:
        cmake_cmd.append('-DCMAKE_BUILD_TYPE=DEBUG')

    src_path = os.path.join(os.getcwd(), this_path, args.target_platform)
    
    toolchain_path = os.path.join(src_path, "toolchain.cmake")
    cmake_cmd.append("-DCMAKE_TOOLCHAIN_FILE=%s" % toolchain_path)
    
    if "avr" == args.target_platform:
        cmake_cmd.append("-DF_CPU=%d" % args.fcpu)
        cmake_cmd.append("-DMCU=%s" % args.mcu)
        cmake_cmd.append("-DBAUD=%d" % args.baud)
        cmake_cmd.append("-DBOOTSTARTB=0x%x" %\
                         chipdefs.bootstartb(args.mcu, args.bs))

    cmake_cmd.extend(["-G", "Unix Makefiles"])
    cmake_cmd.append(src_path)
    
    return cmake_cmd

this_path = os.path.dirname(sys.argv[0])

parser = argparse.ArgumentParser()

target_parsers = parser.add_subparsers(help="Target platform")
setup_target_avr_parser(get_parser(target_parsers, this_path, "avr"))
setup_target_pc_parser(get_parser(target_parsers, this_path, "pc"))

args = parser.parse_args()
if args.verbose:
    print args

if not os.path.exists(args.build_dir):
    os.makedirs(args.build_dir)

cmake_cmd = build_cmake_command(args, this_path)
if args.verbose:
    print " ".join(cmake_cmd)

os.chdir(args.build_dir)
check_call(cmake_cmd)
